/*
MIT License

Copyright (c) 2021 Mart√≠n Montes

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/mmontes11/echoperator/pkg/echo/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ScheduledEchoLister helps list ScheduledEchos.
// All objects returned here must be treated as read-only.
type ScheduledEchoLister interface {
	// List lists all ScheduledEchos in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ScheduledEcho, err error)
	// ScheduledEchos returns an object that can list and get ScheduledEchos.
	ScheduledEchos(namespace string) ScheduledEchoNamespaceLister
	ScheduledEchoListerExpansion
}

// scheduledEchoLister implements the ScheduledEchoLister interface.
type scheduledEchoLister struct {
	indexer cache.Indexer
}

// NewScheduledEchoLister returns a new ScheduledEchoLister.
func NewScheduledEchoLister(indexer cache.Indexer) ScheduledEchoLister {
	return &scheduledEchoLister{indexer: indexer}
}

// List lists all ScheduledEchos in the indexer.
func (s *scheduledEchoLister) List(selector labels.Selector) (ret []*v1alpha1.ScheduledEcho, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ScheduledEcho))
	})
	return ret, err
}

// ScheduledEchos returns an object that can list and get ScheduledEchos.
func (s *scheduledEchoLister) ScheduledEchos(namespace string) ScheduledEchoNamespaceLister {
	return scheduledEchoNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ScheduledEchoNamespaceLister helps list and get ScheduledEchos.
// All objects returned here must be treated as read-only.
type ScheduledEchoNamespaceLister interface {
	// List lists all ScheduledEchos in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ScheduledEcho, err error)
	// Get retrieves the ScheduledEcho from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ScheduledEcho, error)
	ScheduledEchoNamespaceListerExpansion
}

// scheduledEchoNamespaceLister implements the ScheduledEchoNamespaceLister
// interface.
type scheduledEchoNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ScheduledEchos in the indexer for a given namespace.
func (s scheduledEchoNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ScheduledEcho, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ScheduledEcho))
	})
	return ret, err
}

// Get retrieves the ScheduledEcho from the indexer for a given namespace and name.
func (s scheduledEchoNamespaceLister) Get(name string) (*v1alpha1.ScheduledEcho, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("scheduledecho"), name)
	}
	return obj.(*v1alpha1.ScheduledEcho), nil
}
